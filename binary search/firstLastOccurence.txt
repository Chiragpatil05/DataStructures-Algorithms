Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


todo: approach 1 = O(n)
vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        vector<int> ans;

        int firstOcc = -1;
        for(int i=0 ; i<n ; i++){
            if(nums[i] == target){
                firstOcc = i;
                break;
            }
        }

        int lastOcc = -1;
        for(int i=n-1 ; i>=0 ; i--){
            if(nums[i] == target){
                lastOcc = i;
                break;
            }
        }

        ans.push_back(firstOcc);
        ans.push_back(lastOcc);

        return ans;
    }

todo: approach 2 = using binary search O(log n)
  vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int start = 0;
        int end = n-1;

        // first occurence
        int firstOcc = -1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] == target){
                firstOcc = mid;
                end = mid - 1;
            }
            else if(nums[mid] < target){
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }

        // last occurence
        start = 0;
        end = n-1;
        int lastOcc = -1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] == target){
                lastOcc = mid;
                start = mid + 1;
            }
            else if(nums[mid] < target){
                start = mid +1;
            }
            else{
                end = mid - 1;
            }
        }

        vector<int> ans(2);
        ans[0] = firstOcc;
        ans[1] = lastOcc;

        return ans;
        
    }
