Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.

Example 1:
Input: nums = [3,4,5,1,2]
Output: 1

Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0

Example 3:
Input: nums = [11,13,15,17]
Output: 11

//? solution
todo: approach 1 : brute force approach O(n)
   int findMin(vector<int>& nums) {
        int n = nums.size();

        int mini = nums[0];
        for(int i=0 ; i<n ; i++){
            if(nums[i] < mini){
                mini = nums[i];
            }
        }
        return mini;
    }

todo : approach2 : using binary search O(logn)
int findMin(vector<int>& nums) {
        int n = nums.size();
        int start = 0;
        int end = n-1;

        int ans = nums[0];

        while(start <= end){
            int mid = start + (end - start)/2;

            // if mid element is left sorted then minimum element is present in right side
            if(nums[mid] >= nums[0]){
                start = mid + 1;
            }
            // if mid element is right sorted then it could be a minimum element and also check in left side 
            else if(nums[mid] < nums[0]){
                ans = nums[mid];
                end = mid - 1 ;
            }
        }

        return ans;
    }